#include <iostream>
#include <fstream>
#include <string>
#include <vcl.h>
#include <cstdlib>
#include <ctime>
#include <Jpeg.hpp>
#include <pngimage.hpp>
#include "uPrincipal.h"
#include "UtilUnit.h"
//#include <System.SysUtils>
//#pragma hdrstop

using namespace std;
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

TStringGrid *grid;
TForm1 *Form1;
TBitmap *BmpImg = NULL;
TBitmap *BmpImg1 = new TBitmap();
TJPEGImage *JpgImg = NULL;
TPngImage *pngImg = NULL;
TListBox * lstEscolas;
TSQLConnection *SQLConnection2;
TMemoryStream *StreamImagem;
TOpenDialog *AbreLogo;
TBitmap** imagensDoBanco = NULL;
TBitmap *BmpImgGrid = new TBitmap();
TImage *imagem = new TImage(NULL);




//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}


TMemoryStream* converteParaMemoryStream(TImage *imagem);
TSQLConnection* ConectaBD();



void __fastcall TForm1::btnAbrirClick(TObject *Sender)
{

  TOpenDialog *AbreLogo = new TOpenDialog(NULL);
	AbreLogo->Filter = "Imagem |*.bmp;*.jpg;*.png";
	AbreLogo->Execute( );


	if (AbreLogo->FileName.Trim( ) != "")
	{
		BmpImg = new TBitmap();
		BmpImg->Canvas->Brush->Style = bsClear;
		BmpImg->Transparent = true;
		if (ExtractFileExt(AbreLogo->FileName).UpperCase() == ".JPG")
		{
			JpgImg = new TJPEGImage();
			JpgImg->LoadFromFile(AbreLogo->FileName);
			BmpImg->Assign(JpgImg);
		}
		else if (ExtractFileExt(AbreLogo->FileName).UpperCase() == ".BMP")
		{
			BmpImg->LoadFromFile(AbreLogo->FileName);
		}
		else if (ExtractFileExt(AbreLogo->FileName).UpperCase() == ".PNG")
		{
			pngImg = new TPngImage( );
			pngImg->Transparent = true;
			//todos esses comandos para converter png em bitmap são necessários
			//porque algumas imagens em png ficavam com fundo preto ao converter
			pngImg->Canvas->Brush->Style = bsClear;
			pngImg->Canvas->Brush->Color = clWhite;
			pngImg->LoadFromFile(AbreLogo->FileName);
			pngImg->Transparent = true;
			BmpImg->Height = pngImg->Height;
			BmpImg->Width = pngImg->Width;
			BmpImg->Canvas->Brush->Style = bsSolid;
			BmpImg->Canvas->Brush->Color = clWhite;
			BmpImg->Canvas->FillRect(Rect(0,0,pngImg->Width,pngImg->Height));
			pngImg->Draw(BmpImg->Canvas,Rect(0,0,pngImg->Width,pngImg->Height));
			pngImg->RemoveTransparency();
		}

		imagem->Picture->Bitmap = BmpImg;
    	// deixa a imagem centralizada
    	imagem->Stretch = True;


	}

}



//---------------------------------------------------------------------------

void __fastcall TForm1::btnGravarClick(TObject *Sender){


		if(TeditNome->Text == ""){
           ShowMessage("Informe um nomo para a instituição");
           return;
        }else if(imagem->Picture == NULL){
           ShowMessage("Selecione logo para a instituição");
           return;
        }


	TSQLConnection* conexao = ConectaBD();

	if(conexao == NULL){
		ShowMessage("Falha ao conectar ao banco de dados");
	}

	    // Cria o comando SQL INSERT com um parâmetro do tipo image
		TSQLQuery* query = new TSQLQuery(NULL);
		query->SQLConnection = conexao;

		// Campo nome da tabela
		AnsiString nomeIntituicao = TeditNome->Text;

		// Campo imagem da tabela
		TMemoryStream* logo = converteParaMemoryStream(imagem);

		query->SQL->Text = "INSERT INTO dbo.INSTITUICAO(nomeIntituicao, logoIntituicao) VALUES ('" + nomeIntituicao + "' , Convert(varbinary(max),:logoInstituicao))";
		query->ParamByName("logoInstituicao")->LoadFromStream(logo, ftBlob);

    try {

        // Executa o comando INSERT
        query->ExecSQL();
        ShowMessage("Gravado !");
        TeditNome->Text = "";
        imagem->Picture = NULL;

    }catch(...) {

        ShowMessage("Erro ao executar a query");

    }

    delete conexao;
    delete query;


	TForm2 *Form2 = dynamic_cast<TForm2*>(Application->MainForm->FindComponent("Form2"));
   	delete Form2;

    Form2 = new TForm2(this);
    Form2->grid->Parent = plnPrincipal;
    Form2->grid->Align = alClient;




}



TMemoryStream* converteParaMemoryStream(TImage *imagemLogo){


	TMemoryStream* stream = new TMemoryStream();
	try {
	   imagemLogo->Picture->Bitmap->SaveToStream(stream);
	   return(stream);
	}
	catch(...){
	   ShowMessage("Erro ao criar o objeto Memory Stream");
	}


}




TSQLConnection* ConectaBD()
{

	TSQLConnection *SQLConnection2 = new TSQLConnection(NULL);
	SQLConnection2->ConnectionName = "MSSQLConnection";
	SQLConnection2->DriverName = "MSSQL";
	SQLConnection2->GetDriverFunc = "getSQLDriverMSSQL";
	SQLConnection2->KeepConnection = true;
	SQLConnection2->LibraryName = "dbxmss.dll";
	SQLConnection2->LoginPrompt = false;
	SQLConnection2->LoadParamsOnConnect = false;
	SQLConnection2->Name = "SQLConnection2";
	SQLConnection2->Tag = 0;
	SQLConnection2->VendorLib = "oledb";
	SQLConnection2->Params->Clear();
	SQLConnection2->Params->Append("DriverName=MSSQL");
	SQLConnection2->Params->Append("HostName=localhost\\KAPTUREALL");
	SQLConnection2->Params->Append("DataBase=Easy51");
	SQLConnection2->Params->Append("User_Name=sa");
	SQLConnection2->Params->Append("Password=K4ptur34ll");
	SQLConnection2->Params->Append("BlobSize=-1");
	SQLConnection2->Params->Append("ErrorResourceFile=");
	SQLConnection2->Params->Append("LocaleCode=0000");
	SQLConnection2->Params->Append("MSSQL TransIsolation=ReadCommited");
	SQLConnection2->Params->Append("OS Authentication=False");
	SQLConnection2->Params->Append("Prepare SQL=False");
	try
	{
		SQLConnection2->Connected = true;
		return SQLConnection2;
	}
	catch(Exception &ex)
	{
		delete SQLConnection2;
		return NULL;
	}

}




void __fastcall TForm1::FormCreate(TObject *Sender)
{

	Form2 = new TForm2(this);
	Form2->grid->Parent = plnPrincipal;
    Form2->grid->Align = alClient;

    Form2->Color = clWebSteelBlue;
   // Form2->
    

}




void __fastcall TForm1::btnUsarClick(TObject *Sender)
{

	TForm2 *Form2 = dynamic_cast<TForm2*>(Application->MainForm->FindComponent("Form2"));

    AnsiString aux;
    TBitmap* BitmapParaCampoImagem = new TBitmap();

	int linhaSelecionada = Form2->grid->Row;

	aux = Form2->vetorLogos[linhaSelecionada].nome;
	BitmapParaCampoImagem = Form2->vetorLogos[linhaSelecionada].bitmap;

    // salvar imagem como .bmp
    // e editar o arquivo Easy.ini
    TIniFile * pArq = new TIniFile(ExtractFileDir(Application->ExeName)+"\\Easy.ini");

    pArq->WriteString("Configuracao","NomeEscola",aux);

    delete pArq;

    BitmapParaCampoImagem->SaveToFile(ExtractFileDir(Application->ExeName) + "\\img\\logo.bmp");

    ShowMessage("Feito");

    delete BitmapParaCampoImagem;


}



//---------------------------------------------------------------------------
void __fastcall TForm1::btnRemoveClick(TObject *Sender)
{
	

	TForm2 *Form2 = dynamic_cast<TForm2*>(Application->MainForm->FindComponent("Form2"));

	// grid->Row retorno a linha seleciona que será deletada
 	int linhaSelecionada = Form2->grid->Row;


 	// verifico na struct qual é o id do banco naquela linha 
 	int id = Form2->vetorLogos[linhaSelecionada].id;

	// converto de int para string 
 	AnsiString idString = IntToStr(id);

 	// inicio a conexão com o banco
	TSQLConnection* Conexao = ConectaBD();
    TSQLQuery *query = new TSQLQuery(NULL);
    query->SQLConnection = Conexao;

    // monto a query para deletar de acorde com o id selecionado
    query->SQL->Add("Delete from dbo.INSTITUICAO where idInstifuicao = " + idString);
    // executo a query
    query->ExecSQL();

    // libero os ponteiros
    delete query;
    delete Conexao;

   	delete Form2;

    Form2 = new TForm2(this);
    Form2->grid->Parent = plnPrincipal;
    Form2->grid->Align = alClient;

}

void __fastcall TForm1::BtnImpressaoCartClick(TObject *Sender)
{

	
  TOpenDialog *AbreLogo = new TOpenDialog(NULL);
	AbreLogo->Filter = "Imagem |*.bmp;*.jpg;*.png";
	AbreLogo->Execute( );


	if (AbreLogo->FileName.Trim( ) != "")
	{
		BmpImg = new TBitmap();
		BmpImg->Canvas->Brush->Style = bsClear;
		BmpImg->Transparent = true;
		if (ExtractFileExt(AbreLogo->FileName).UpperCase() == ".JPG")
		{
			JpgImg = new TJPEGImage();
			JpgImg->LoadFromFile(AbreLogo->FileName);
			BmpImg->Assign(JpgImg);
		}
		else if (ExtractFileExt(AbreLogo->FileName).UpperCase() == ".BMP")
		{
			BmpImg->LoadFromFile(AbreLogo->FileName);
		}
		else if (ExtractFileExt(AbreLogo->FileName).UpperCase() == ".PNG")
		{
			pngImg = new TPngImage( );
			pngImg->Transparent = true;
			//todos esses comandos para converter png em bitmap são necessários
			//porque algumas imagens em png ficavam com fundo preto ao converter
			pngImg->Canvas->Brush->Style = bsClear;
			pngImg->Canvas->Brush->Color = clWhite;
			pngImg->LoadFromFile(AbreLogo->FileName);
			pngImg->Transparent = true;
			BmpImg->Height = pngImg->Height;
			BmpImg->Width = pngImg->Width;
			BmpImg->Canvas->Brush->Style = bsSolid;
			BmpImg->Canvas->Brush->Color = clWhite;
			BmpImg->Canvas->FillRect(Rect(0,0,pngImg->Width,pngImg->Height));
			pngImg->Draw(BmpImg->Canvas,Rect(0,0,pngImg->Width,pngImg->Height));
			pngImg->RemoveTransparency();
		}

		imagem->Picture->Bitmap = BmpImg;
                BtnImpressaoCart->
		
    	// deixa a imagem centralizada
    	imagem->Stretch = True;


	}


}
//---------------------------------------------------------------------------

